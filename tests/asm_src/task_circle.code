	call main
	hlt
	
main:
	push 20
	; rad
	pop [0]
	
	push 29
	; cx
	pop [1]
	
	push 29
	; cy
	pop[2]
	
l_while_cond0:

	push [0]
	push 0
	jb l_while_end0
	call draw_circle
	
	push [0]
	push 1
	sub
	pop [0]
	
	jmp l_while_cond0
	
l_while_end0:

	dsp
	ret
	
draw_circle:
	; ax = x;
	; bx = y;
	; cx = rad;
	
	; x = rad
	push [0] 
	pop ax
		
l_while_cond:

	push ax
	push 0
	jb l_while_end

	; Вычисляем y
	push [0]
	push [0]
	mul
	push ax
	push ax
	mul
	sub
	sqrt
	; Вычислили y
	pop bx
	
	; (cx - x; cy - y)
	push [1]
	push ax
	sub
	int
	
	push [2]
	push bx
	sub
	int
	
	call draw_point

	; (cx - x; cy + y)
	push [1]
	push ax
	sub
	int
	
	push [2]
	push bx
	add
	int
	
	call draw_point
	
	; (cx + x; cy - y)
	push [1]
	push ax
	add
	int
	
	push [2]
	push bx
	sub
	int
	
	call draw_point
		
	; (cx + x; cy + y)
	push [1]
	push ax
	add
	int
	
	push [2]
	push bx
	add
	int
	
	call draw_point
		
	; dec ax
	push ax
	push 1
	sub
	pop ax
	
	jmp l_while_cond
	
l_while_end:
	ret

; stack:
; 		x
;		y
;		ret_addr
draw_point:
	; ret_addr
	pop dx
	
	; mem_addr = 128 + x + y * disp_width
	push 60
	mul
	add
	push 128
	add
	pop cx
	
	push 1
	pop [cx]
	
	push dx
	ret